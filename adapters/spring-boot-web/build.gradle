import static org.springframework.boot.gradle.plugin.SpringBootPlugin.*

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'org.springframework.boot' version '3.3.4' apply false
    id 'io.spring.dependency-management' version '1.1.6'
    id 'maven-publish'
    id 'net.researchgate.release'
    id 'jacoco'
    id 'org.sonarqube'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom BOM_COORDINATES
    }
}
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.test {
    useJUnitPlatform()
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withSourcesJar()
    withJavadocJar()
}

publishing {
    // read version from version.properties (created by release plugin)
    def props = new Properties()
    file("version.properties").withInputStream { props.load(it) }
    println("version: " + props.getProperty("version"))
    version = props.getProperty("version")

    publications {
        mavenJava(MavenPublication) {
            artifactId 'sohoffice-authorization-core'

            from components.java
            pom {
                name = 'sohoffice-authorization core Library'
                description = 'A Java library to authorize request by evaluating ABAC policy statements'

                licenses {
                    license {
                        name = 'The MIT License'
                        url = 'https://opensource.org/license/mit'
                    }
                }
                developers {
                    developer {
                        id = 'sohoffice'
                        name = 'Douglas Liu'
                        email = 'douglas@sohoffice.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:sohoffice/sohoffice-authorization.git'
                    developerConnection = 'scm:git:git@github.com:sohoffice/sohoffice-authorization.git'
                    url = 'https://github.com/sohoffice/sohoffice-authorization'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = 'http://localhost:8081/repository/maven-releases/'
            def snapshotsRepoUrl = 'http://localhost:8081/repository/maven-snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials(PasswordCredentials)
            allowInsecureProtocol = true
        }
    }
}

release {
    tagTemplate = '${name}-v${version}'
    versionPropertyFile = 'version.properties'
}

afterReleaseBuild.dependsOn publish

// Jacoco Coverage
jacocoTestReport.dependsOn test // tests are required to run before generating the report
jacocoTestReport {
    reports {
        xml.required = true
    }
}
